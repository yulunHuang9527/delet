import cv2
import numpy as np

def detect_fall(previous_height, current_height, threshold=50):
    """简单的跌倒检测算法，当高度减少超过阈值时认为发生跌倒"""
    if previous_height is None:
        return False
    return previous_height - current_height > threshold

# 读取影片
cap = cv2.VideoCapture('path_to_video.mp4')

# 创建背景减除器
fgbg = cv2.createBackgroundSubtractorMOG2()

# 初始化变量
frame_count = 0
fall_detected = False
previous_height = None
output_video_path = 'output_fall_detection.mp4'
fps = int(cap.get(cv2.CAP_PROP_FPS))
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

# 定义视频编码和输出视频对象
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter(output_video_path, fourcc, fps, (frame_width, frame_height))

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame_count += 1

    # 每10秒处理一次 (假设每秒1帧，即每10帧处理一次)
    if frame_count % (10 * fps) == 0:
        # 删除10帧
        for _ in range(10):
            ret, frame = cap.read()
            if not ret:
                break
            frame_count += 1

    # 转为灰度图像
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    fgmask = fgbg.apply(gray)

    # 寻找轮廓
    contours, _ = cv2.findContours(fgmask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    for cnt in contours:
        # 忽略小面积的轮廓
        if cv2.contourArea(cnt) < 500:
            continue

        # 计算轮廓的边界框
        x, y, w, h = cv2.boundingRect(cnt)

        # 检测跌倒
        if detect_fall(previous_height, h):
            fall_detected = True
            # 计算当前帧的时间戳
            timestamp = frame_count / fps
            time_text = f'Time: {timestamp:.2f} sec'

            # 在帧上添加时间戳
            cv2.putText(frame, time_text, (10, frame_height - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
            print(f"Fall detected at frame {frame_count}, Time: {timestamp:.2f} sec")
            
            # 写入检测到跌倒的帧到输出视频
            out.write(frame)
            
            # 可以在此处保存或标记检测到跌倒的帧
            break

        # 更新前一次的高度
        previous_height = h

# 释放视频捕获和写入对象
cap.release()
out.release()
cv2.destroyAllWindows()
